// Generated by gencpp from file datmo/ThetaPost.msg
// DO NOT EDIT!


#ifndef DATMO_MESSAGE_THETAPOST_H
#define DATMO_MESSAGE_THETAPOST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace datmo
{
template <class ContainerAllocator>
struct ThetaPost_
{
  typedef ThetaPost_<ContainerAllocator> Type;

  ThetaPost_()
    : theta()
    , distance()  {
    }
  ThetaPost_(const ContainerAllocator& _alloc)
    : theta(_alloc)
    , distance(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _theta_type;
  _theta_type theta;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::datmo::ThetaPost_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::datmo::ThetaPost_<ContainerAllocator> const> ConstPtr;

}; // struct ThetaPost_

typedef ::datmo::ThetaPost_<std::allocator<void> > ThetaPost;

typedef boost::shared_ptr< ::datmo::ThetaPost > ThetaPostPtr;
typedef boost::shared_ptr< ::datmo::ThetaPost const> ThetaPostConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::datmo::ThetaPost_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::datmo::ThetaPost_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::datmo::ThetaPost_<ContainerAllocator1> & lhs, const ::datmo::ThetaPost_<ContainerAllocator2> & rhs)
{
  return lhs.theta == rhs.theta &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::datmo::ThetaPost_<ContainerAllocator1> & lhs, const ::datmo::ThetaPost_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace datmo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::datmo::ThetaPost_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::datmo::ThetaPost_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::datmo::ThetaPost_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::datmo::ThetaPost_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::datmo::ThetaPost_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::datmo::ThetaPost_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::datmo::ThetaPost_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c4ad3bc73961ea47fc04a581b96a79c";
  }

  static const char* value(const ::datmo::ThetaPost_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c4ad3bc73961ea4ULL;
  static const uint64_t static_value2 = 0x7fc04a581b96a79cULL;
};

template<class ContainerAllocator>
struct DataType< ::datmo::ThetaPost_<ContainerAllocator> >
{
  static const char* value()
  {
    return "datmo/ThetaPost";
  }

  static const char* value(const ::datmo::ThetaPost_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::datmo::ThetaPost_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] theta\n"
"float32[] distance\n"
;
  }

  static const char* value(const ::datmo::ThetaPost_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::datmo::ThetaPost_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.theta);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThetaPost_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::datmo::ThetaPost_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::datmo::ThetaPost_<ContainerAllocator>& v)
  {
    s << indent << "theta[]" << std::endl;
    for (size_t i = 0; i < v.theta.size(); ++i)
    {
      s << indent << "  theta[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.theta[i]);
    }
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATMO_MESSAGE_THETAPOST_H
